ДЛЯ РАСПРЕДЕЛЕННОГО ХРАНЕНИЯ ДАННЫХ 
Кича И.В.1 (студент), Тимкин А.К.1 (студент) 
Научный руководитель – к.т.н., доцент ФБИТ Таранов С.В. 
1 – Университет ИТМО 
e-mail: kicha@niuitmo.ru 
В ходе данной работы были рассмотрены различные методы организации систем 
распределенных реестров. Были рассмотрены примитивные структуры, древовидные и их 
модификации. Была проанализирована производительность системы хранения данных при 
использовании разных подходов. Были предложены эффективные алгоритмы подтверждения 
наличия блока в цепи. 
Ключевые слова 
Распределенные реестры, хранение данных, древовидные структуры данных, алгоритмы 
упрощенной проверки оплаты, блокчейн. 
По данным различных исследования последнее десятилетие возрастает количество 
исследований в области систем распределенных реестров. Таким образом, число 
разработок увеличивается и их область применения расширяется. Одним из таких 
направлений является возможность хранения данных. Системы, основанные на 
технологии блокчейн, в свою очередь обеспечивают конфиденциальность информации 
и ее целостность, что является их важным преимуществом перед традиционными 
подходами.  При этом существует проблема пропорционального роста размера цепочки 
блоков при добавлении новых данных [3]. 
В результате изучения одномерных методов организации блокчейна было 
установлено, что данный метод хранения данных способен осуществлять 
функционирование систем распределенных реестров на базовом уровне, но при этом 
важной проблемой будет пропорциональный рост размера цепочки блоков при 
добавлении новых данных. Более того, описанные методы позволяют хранить 
минимальное количество данных, что в свою очередь ставит под вопрос эффективность 
использования одномерных последовательных цепочек. Также при введении 
ограничения на размер блока возможно замедленное время обработки транзакции в 
будущем, так как при определенных алгоритмах консенсуса будет увеличиваться время 
генерации новых блоков. В связи с упомянутыми выводами возникает необходимость 
рассмотрения возможности применения других структур данных в системах 
распределенного реестра в контексте хранения информации. 
Было установлено, что древовидные структуры данных позволяют ускорить 
процесс проверки валидности блоков по сравнению с хеш-цепочками. Применение 
деревьев Меркла позволяет получить прирост производительности системы за счет 
уменьшения числа необходимых действий для доказательства существования блока в 
структуре. Данная возможность породила появление упрощенной проверки оплаты 
(SPV), что позволяет, имея только корень дерева и аутентификационный путь, 
подтверждать данные без необходимости загружать все блоки [1]. На рисунке 1 
изображен аутентификационный путь к блоку L1, построенный для подтверждения 
наличия этого блока в структуре. 
Рис. 1. Аутентификационный путь к блоку L1 
При этом стоит упомянуть, что данная технология имеет и недостатки. Так, 
например, для вычисления верхнего хеша необходимо знать все промежуточные узлы 
дерева, для чего необходимо либо их хранить в системе, либо вычислять заново при 
каждом запросе. Первый вариант при больших размерах дерева потребует большего 
количества места в памяти. Второй в свою очередь повлечет снижение 
производительности системы. Рассмотренная структура данных имеет модификации, 
которые следует рассмотреть для более точного анализа вариантов хранения данных с 
помощью систем распределенных реестров. 
Необходимо рассмотреть модификацию хеш-дерева – Merkle Patricia Trie, которая 
представляет собой дерево Меркла, которое хранит пары ключи значение, где ключи 
являются последовательностями байтов. Данная структура данных имеет определенную 
организацию блоков, которую удобно было бы рассмотреть на примере криптовалютной 
системы Ethereum. В данном контексте вводится понятие ниббла – половины байтов – 
последовательность которых выступает в дереве ребром. Каждый узел может иметь до 
16 дочерних блоков. 
Существует три вида блоков: 
1. Branch node – блок, содержащий до 16 ссылок на дочерние узлы, но также 
может содержать значение. 
2. Extension node – блок, используемый, используемый для хранения части пути, 
общей для какого-то множества узлов и содержащий ссылку на следующий branch node. 
3. Leaf node – конечный блок, хранящий часть пути и значение. 
Структура дерева Меркла-Патрициа на примере криптовалюты Ethereum 
изображена на рисунке 2. 
Очевидно, что описанная структура данных имеет ряд преимуществ над обычными 
хеш-деревьями. Прежде всего наличие префиксов позволяет упростить поиск значений, 
так как в отличие от дерева Меркла дерево Меркла-Патрициа позволяет быстро найти 
путь для доказательства наличия блока. Более того, наличие трех видов узлов позволяет 
одинаково хорошо работать как с малыми объемами данных, так и с большими. 
При всех положительных сторонах деревья Меркла-Патрициа все же требуют для 
доказательства использование для каждого узла хешей всех дочерних блоков, что все так 
же остается неоптимальным. 
Более современной и удобной структурой является дерево Веркла. Со структурной 
точки зрения оно очень схоже с деревом Меркла-Патрициа, что изображено на                               
рисунке 3. Так, например для нахождения блока с адресом 4cc, нам нужно найти 
дочерний узел корня по адресу 4, в его дочерних узлах найти блок с адресом c, в котором 
опять необходимо обратиться к дочернему узлу по адресу c. В конечном счете мы 
получаем доступ к информации. 
Рис. 2. Структура Merkle Patricia Trie на примере Ethereum [2] 
Рис. 3. Структура дерева Веркла 
Так как дерево Меркла-Патрициа требует учитывать хеши узлов-сестер, при, 
например, размере дерева в 256 узлов на верхнем уровне будет почти наверняка 
заполнены все 16 узлов, а на втором уровне заполненность будет в среднем на уровне 
63.3%. Дерево Меркла не имеет такого недостатка. Вместо этого для доказательства 
нужно иметь только путь к блоку и небольшое дополнение. 
Под дополнением подразумевается так называемое векторное обязательство. Под 
этим понятием подразумевается хеш-функция, которая обрабатывает список z1,z2…zn и 
получает результат C. Важной особенностью при этом является то, что векторное 
обязательство позволяет установить, что для определенного C  i-ый элемент равен zi, при 
котором нет необходимости задействовать другие дочерние узлы. Общая схема работы 
данного алгоритма доказательства принадлежности блока дереву Веркла изображена на 
рисунке 4. 
Рис. 4. Доказательство принадлежности блока в дереве Веркла 
Более производительным обязательством, нежели векторное, является 
полиномиальное. Полиномиальное обязательство позволяет нам хешировать полином и 
доказывать существование на основе оценки полинома в заданной точке. Данный 
алгоритм можно использовать следующим образом: ввести набор c1,c2…ci и задать 
y1,y2…yi, так чтобы существовал полином P такой, что P(ci) = yi. Данный полином 
можно найти с помощью интерполяции методом Лагранжа. Одним из наиболее 
эффективных алгоритмов доказательств через полиномиальные обязательства является 
алгоритм KZG (Kate, Zaverucha and Goldberg), где обязательство представляет собой 
одну 32-48-байтную точку эллиптической кривой [4]. 
Таким образом, при ширине дерева равной 256 и использовании алгоритма KZG, 
доказательство будет занимать 96 байт, что в три раза меньше, нежели доказательство 
Меркла [5]. 
В результате исследования было установлено, что древовидные структуры 
являются наиболее эффективными среди рассмотренных для хранения данных. Были 
изучены достоинства и недостатки каждого решения, что позволило определить, какие 
из них оправданы для применения в области хранения данных. Таким образом, среди 
рассмотренных решений наиболее быстрым и удобным оказалось дерево Веркла. 
Результаты выполненной работы в перспективе планируется развить в рамках 
выполнения других научно-исследовательских работ, чтобы изучить тему исследования 
более подробно с перспективой включения результатов в магистерскую диссертацию. 
Литература 
1. Antonopoulos A.M. Mastering Bitcoin: unlocking digital cryptocurrencies. 2014 //isbn: 
9781449374044. С. 272. 
2. Ethereum StackExchange: ELI5 How does a Merkle-Patricia-trie tree work?  
[Электронный ресурс]. Режим доступа: https:// ethereum. stackexchange.com/ 
questions/6415/ eli5-how-does-a-merkle- patricia-trie-tree-work (дата обращения: 
15.01.2023). 
3. Vitalik Buterin's website: Verkle trees [Электронный ресурс]. Режим доступа: 
https://vitalik.ca/general/2021/06/18/verkle.html (дата обращения: 15.01.2023). 
101 
XII Конгресс молодых учёных. Том 2 
4. Kate A., Zaverucha G.M., Goldberg I. Constant-size commitments to polynomials and their 
applications //International conference on the theory and application of cryptology and 
information security. Springer. Berlin. Heidelberg. 2010. С. 177-194. 
5. Dankrad Feist: KZG polynomial commitments [Электронный ресурс]. Режим доступа: 
https://dankradfeist.de/ethereum/2020/06/16/kate-polynomial-commitments.html 
(дата 
обращения: 15.01.2023).