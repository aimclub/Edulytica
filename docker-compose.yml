version: "3.9"

services:
  edulytica_db:
    container_name: "EdulyticaDatabase"
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${DB_PORT}:5432"
    networks:
      - edulytica_network

  edulytica_redis:
    container_name: "EdulyticaRedis"
    image: redis:7-alpine
    restart: always
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - edulytica_network

  edulytica_gateway:
    container_name: "EdulyticaGateway"
    image: nginx:1.27.4-alpine
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    volumes:
      - ./src/gateway/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - edulytica_api
      - edulytica_auth
      - edulytica_rag
    networks:
      - edulytica_network

  edulytica_api:
    container_name: "EdulyticaAPI"
    build:
      context: .
      dockerfile: ./src/edulytica_api/Dockerfile
    volumes:
      - ./src:/app/src
      - ./src/common:/app/src/common
    ports:
      - "${API_PORT}:${API_PORT}"
    depends_on:
      - edulytica_db
    env_file:
      - ./.env
    networks:
      - edulytica_network

  edulytica_auth:
    container_name: "EdulyticaAuth"
    build:
      context: .
      dockerfile: ./src/auth/Dockerfile
    volumes:
      - ./src:/app/src
      - ./src/common:/app/src/common
    ports:
      - "${AUTH_PORT}:${AUTH_PORT}"
    depends_on:
      - edulytica_db
    env_file:
      - ./.env
    networks:
      - edulytica_network

  edulytica_llm_qwen:
    container_name: "EdulyticaQwen"
    build:
      context: .
      dockerfile: ./src/models/Dockerfile
    volumes:
      - ./src:/app/src
      - ./src/common:/app/src/common
      - ./src/LLM:/app/src/LLM
    ports:
      - "${LLM_QWEN_PORT}:${LLM_QWEN_PORT}"
    depends_on:
      - kafka
      - edulytica_db
    env_file:
      - ./.env
    environment:
      - MODEL_TYPE=qwen
    networks:
      - edulytica_network

  edulytica_llm_vikhr:
    container_name: "EdulyticaVikhr"
    build:
      context: .
      dockerfile: ./src/models/Dockerfile
    volumes:
      - ./src:/app/src
      - ./src/common:/app/src/common
      - ./src/LLM:/app/src/LLM
    ports:
      - "${LLM_VIKHR_PORT}:${LLM_VIKHR_PORT}"
    depends_on:
      - kafka
      - edulytica_db
    env_file:
      - ./.env
    environment:
      - MODEL_TYPE=vikhr
    networks:
      - edulytica_network

  edulytica_orchestration:
    container_name: "EdulyticaOrchestration"
    build:
      context: .
      dockerfile: ./src/orchestration/Dockerfile
    volumes:
      - ./src:/app/src
      - ./src/common:/app/src/common
    ports:
      - "${ORCHESTRATOR_PORT}:${ORCHESTRATOR_PORT}"
    depends_on:
      edulytica_db:
        condition: service_started
      kafka:
        condition: service_healthy
    env_file:
      - ./.env
    networks:
      - edulytica_network

  edulytica_rag:
    container_name: "EdulyticaRag"
    build:
      context: .
      dockerfile: ./src/rag/Dockerfile
    volumes:
      - ./src:/app/src
      - ./src/common:/app/src/common
    ports:
      - "${RAG_PORT}:${RAG_PORT}"
    depends_on:
      - edulytica_db
    env_file:
      - ./.env
    networks:
      - edulytica_network

  edulytica_frontend:
    container_name: "EdulyticaFrontend"
    build:
      context: ./src/front_end
      dockerfile: Dockerfile
    dns:
      - 8.8.8.8
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    networks:
      - edulytica_network
      
  edulytica_chromadb:
    container_name: "EdulyticaChromaDatabase"
    image: "chromadb/chroma:0.6.3"
    volumes:
      - ./chromadb:/chroma/chroma
    ports:
      - "${CHROMA_PORT}:8000"
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma # this is the default path, change it as needed
      - ANONYMIZED_TELEMETRY=TRUE
    networks:
      - edulytica_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: "EdulyticaZookeeper"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOO_4LW_COMMANDS_WHITELIST: "srvr, ruok, conf, stat"
    healthcheck:
      test: [ "CMD", "sh", "-c", "echo 'ruok' | nc -w 2 localhost 2181 | grep imok" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - edulytica_network

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: "EdulyticaKafka"
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: [ "CMD", "kafka-brokers", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 40s
    networks:
      - edulytica_network

  kafka_ui:
    image: provectuslabs/kafka-ui:latest
    container_name: "EdulyticaKafkaUI"
    ports:
      - "8081:8080"
    depends_on:
      - kafka
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    networks:
      - edulytica_network

networks:
  edulytica_network: